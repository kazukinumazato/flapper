// Generated by gencpp from file flapper/Action.msg
// DO NOT EDIT!


#ifndef FLAPPER_MESSAGE_ACTION_H
#define FLAPPER_MESSAGE_ACTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace flapper
{
template <class ContainerAllocator>
struct Action_
{
  typedef Action_<ContainerAllocator> Type;

  Action_()
    : name()
    , height(0.0)  {
    }
  Action_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , height(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef double _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::flapper::Action_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::flapper::Action_<ContainerAllocator> const> ConstPtr;

}; // struct Action_

typedef ::flapper::Action_<std::allocator<void> > Action;

typedef boost::shared_ptr< ::flapper::Action > ActionPtr;
typedef boost::shared_ptr< ::flapper::Action const> ActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::flapper::Action_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::flapper::Action_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::flapper::Action_<ContainerAllocator1> & lhs, const ::flapper::Action_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::flapper::Action_<ContainerAllocator1> & lhs, const ::flapper::Action_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace flapper

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::flapper::Action_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::flapper::Action_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flapper::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::flapper::Action_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flapper::Action_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::flapper::Action_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::flapper::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70ac77d41564567d694a44436c064b02";
  }

  static const char* value(const ::flapper::Action_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70ac77d41564567dULL;
  static const uint64_t static_value2 = 0x694a44436c064b02ULL;
};

template<class ContainerAllocator>
struct DataType< ::flapper::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "flapper/Action";
  }

  static const char* value(const ::flapper::Action_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::flapper::Action_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"float64 height\n"
"\n"
;
  }

  static const char* value(const ::flapper::Action_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::flapper::Action_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Action_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::flapper::Action_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::flapper::Action_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FLAPPER_MESSAGE_ACTION_H
